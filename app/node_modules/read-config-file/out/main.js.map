{"version":3,"sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFile, readJson } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { Lazy } from \"lazy-val\"\nimport Ajv, { ErrorObject } from \"ajv\"\nimport { normaliseErrorMessages } from \"./ajvErrorNormalizer\"\nimport { parse as parseEnv } from \"dotenv\"\n\nexport interface ReadConfigResult<T> {\n  readonly result: T\n  readonly configFile: string | null\n}\n\nexport async function readConfig<T>(configFile: string): Promise<ReadConfigResult<T>> {\n  const data = await readFile(configFile, \"utf8\")\n  let result\n  if (configFile.endsWith(\".json5\") || configFile.endsWith(\".json\")) {\n    result = require(\"json5\").parse(data)\n  }\n  else if (configFile.endsWith(\".js\")) {\n    result = require(configFile)\n  }\n  else if (configFile.endsWith(\".toml\")) {\n    result = require(\"toml\").parse(data)\n  }\n  else {\n    result = safeLoad(data)\n  }\n  return {result, configFile}\n}\n\nexport async function findAndReadConfig<T>(request: ReadConfigRequest): Promise<ReadConfigResult<T> | null> {\n  const prefix = request.configFilename\n  for (const configFile of [`${prefix}.yml`, `${prefix}.yaml`, `${prefix}.json`, `${prefix}.json5`, `${prefix}.toml`]) {\n    const data = await orNullIfFileNotExist(readConfig<T>(path.join(request.projectDir, configFile)))\n    if (data != null) {\n      return data\n    }\n  }\n\n  return null\n}\n\nexport function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null> {\n  return orIfFileNotExist(promise, null)\n}\n\nexport function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T> {\n  return promise\n    .catch(e => {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        return fallbackValue\n      }\n      throw e\n    })\n}\n\nexport interface ReadConfigRequest {\n  packageKey: string\n  configFilename: string\n\n  projectDir: string\n  packageMetadata: Lazy<{ [key: string]: any } | null> | null\n}\n\nexport async function loadConfig<T>(request: ReadConfigRequest): Promise<ReadConfigResult<T> | null> {\n  let packageMetadata = request.packageMetadata == null ? null : await request.packageMetadata.value\n  if (packageMetadata == null) {\n    packageMetadata = await orNullIfFileNotExist(readJson(path.join(request.projectDir, \"package.json\")))\n  }\n  const data: T = packageMetadata == null ? null : packageMetadata[request.packageKey]\n  return data == null ? findAndReadConfig<T>(request) : {result: data, configFile: null}\n}\n\nexport function getConfig<T>(request: ReadConfigRequest, configPath?: string | null): Promise<ReadConfigResult<T> | null> {\n  if (configPath == null) {\n    return loadConfig<T>(request)\n  }\n  else {\n    return readConfig<T>(path.resolve(request.projectDir, configPath))\n  }\n}\n\nexport async function loadParentConfig<T>(request: ReadConfigRequest, spec: string): Promise<ReadConfigResult<T>> {\n  let isFileSpec: boolean | undefined\n  if (spec.startsWith(\"file:\")) {\n    spec = spec.substring(\"file:\".length)\n    isFileSpec = true\n  }\n\n  let parentConfig = await orNullIfFileNotExist(readConfig<T>(path.resolve(request.projectDir, spec)))\n  if (parentConfig == null && isFileSpec !== true) {\n    let resolved: string | null = null\n    try {\n      resolved = require.resolve(spec)\n    }\n    catch (e) {\n      // ignore\n    }\n\n    if (resolved != null) {\n      parentConfig = await readConfig<T>(resolved)\n    }\n  }\n\n  if (parentConfig == null) {\n    throw new Error(`Cannot find parent config file: ${spec}`)\n  }\n\n  return parentConfig\n}\n\nexport async function validateConfig(config: any, scheme: Lazy<any>, errorMessage: (error: string, errors: Array<ErrorObject>) => string) {\n  const ajv = new Ajv({\n    allErrors: true,\n    coerceTypes: true,\n    verbose: true,\n    errorDataPath: \"configuration\",\n  })\n  require(\"ajv-keywords\")(ajv, [\"typeof\"])\n  const schema = await scheme.value\n  const validator = ajv.compile(schema)\n\n  if (!validator(config)) {\n    const error = new Error(errorMessage(normaliseErrorMessages(validator.errors!, schema), validator.errors!!));\n    (error as any).code = \"ERR_CONFIG_INVALID\"\n    throw error\n  }\n}\n\nexport async function loadEnv(envFile: string) {\n  const data = await orNullIfFileNotExist(readFile(envFile, \"utf8\"))\n  if (data == null) {\n    return null\n  }\n\n  const parsed = parseEnv(data)\n  for (const key of Object.keys(parsed)) {\n    if (!process.env.hasOwnProperty(key)) {\n      process.env[key] = parsed[key]\n    }\n  }\n  require(\"dotenv-expand\")(parsed)\n  return parsed\n}"],"sourceRoot":""}
