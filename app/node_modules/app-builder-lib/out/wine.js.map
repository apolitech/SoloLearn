{"version":3,"sources":["../src/wine.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport { ExecFileOptions } from \"child_process\"\nimport { Lazy } from \"lazy-val\"\nimport * as os from \"os\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { getBinFromGithub } from \"./binDownload\"\nimport { computeEnv, EXEC_TIMEOUT, ToolInfo } from \"builder-util/out/bundledTool\"\nimport { getMacOsVersion } from \"builder-util/out/macosVersion\"\nimport { debug7zArgs, exec, isEnvTrue, log } from \"builder-util/out/util\"\n\nconst wineExecutable = new Lazy<ToolInfo>(async () => {\n  const isUseSystemWine = isEnvTrue(process.env.USE_SYSTEM_WINE)\n  if (isUseSystemWine) {\n    log.debug(null, \"using system wine is forced\")\n  }\n  else if (process.platform === \"darwin\") {\n    // assume that on travis latest version is used\n    const osVersion = await getMacOsVersion()\n    let version: string | null = null\n    let checksum: string | null = null\n    if (semver.gte(osVersion, \"10.13.0\")) {\n      version = \"2.0.3-mac-10.13\"\n      // noinspection SpellCheckingInspection\n      checksum = \"dlEVCf0YKP5IEiOKPNE48Q8NKXbXVdhuaI9hG2oyDEay2c+93PE5qls7XUbIYq4Xi1gRK8fkWeCtzN2oLpVQtg==\"\n    }\n    else if (semver.gte(osVersion, \"10.12.0\") || process.env.TRAVIS_OS_NAME === \"osx\") {\n      version = \"2.0.1-mac-10.12\"\n      // noinspection SpellCheckingInspection\n      checksum = \"IvKwDml/Ob0vKfYVxcu92wxUzHu8lTQSjjb8OlCTQ6bdNpVkqw17OM14TPpzGMIgSxfVIrQZhZdCwpkxLyG3mg==\"\n    }\n\n    if (version != null) {\n      const wineDir = await getBinFromGithub(\"wine\", version, checksum!!)\n      return {\n        path: path.join(wineDir, \"bin/wine\"),\n        env: {\n          ...process.env,\n          WINEDEBUG: \"-all,err+all\",\n          WINEDLLOVERRIDES: \"winemenubuilder.exe=d\",\n          WINEPREFIX: path.join(wineDir, \"wine-home\"),\n          DYLD_FALLBACK_LIBRARY_PATH: computeEnv(process.env.DYLD_FALLBACK_LIBRARY_PATH, [path.join(wineDir, \"lib\")]),\n        },\n      }\n    }\n  }\n\n  if (process.env.COMPRESSED_WINE_HOME) {\n    await exec(path7za, debug7zArgs(\"x\").concat(process.env.COMPRESSED_WINE_HOME!!, \"-aoa\", `-o${path.join(os.homedir(), \".wine\")}`))\n  }\n  else {\n    await checkWineVersion(exec(\"wine\", [\"--version\"]))\n  }\n  return {path: \"wine\"}\n})\n\n/** @private */\nexport function execWine(file: string, args: Array<string>, options: ExecFileOptions = EXEC_TIMEOUT): Promise<string> {\n  if (process.platform === \"win32\") {\n    return exec(file, args, options)\n  }\n  else {\n    return wineExecutable.value\n      .then(wine => {\n        const effectiveOptions = wine.env == null ? options : {...options}\n        if (wine.env != null) {\n          effectiveOptions.env = options.env == null ? wine.env : {\n            ...options.env,\n            ...wine.env,\n          }\n        }\n        return exec(wine.path, [file].concat(args), effectiveOptions)\n      })\n  }\n}\n\n/** @private */\nexport function prepareWindowsExecutableArgs(args: Array<string>, exePath: string) {\n  if (process.platform !== \"win32\") {\n    args.unshift(exePath)\n  }\n  return args\n}\n\n/** @private */\nexport async function checkWineVersion(checkPromise: Promise<string>) {\n  function wineError(prefix: string): string {\n    return `${prefix}, please see https://electron.build/multi-platform-build#${(process.platform === \"linux\" ? \"linux\" : \"macos\")}`\n  }\n\n  let wineVersion: string\n  try {\n    wineVersion = (await checkPromise).trim()\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      throw new Error(wineError(\"wine is required\"))\n    }\n    else {\n      throw new Error(`Cannot check wine version: ${e}`)\n    }\n  }\n\n  if (wineVersion.startsWith(\"wine-\")) {\n    wineVersion = wineVersion.substring(\"wine-\".length)\n  }\n\n  const spaceIndex = wineVersion.indexOf(\" \")\n  if (spaceIndex > 0) {\n    wineVersion = wineVersion.substring(0, spaceIndex)\n  }\n\n  const suffixIndex = wineVersion.indexOf(\"-\")\n  if (suffixIndex > 0) {\n    wineVersion = wineVersion.substring(0, suffixIndex)\n  }\n\n  if (wineVersion.split(\".\").length === 2) {\n    wineVersion += \".0\"\n  }\n\n  if (semver.lt(wineVersion, \"1.8.0\")) {\n    throw new Error(wineError(`wine 1.8+ is required, but your version is ${wineVersion}`))\n  }\n}"],"sourceRoot":""}
