{"version":3,"sources":["../../src/util/packageMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyOrSpaces, log, InvalidConfigurationError } from \"builder-util\"\nimport { readFile, readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { Metadata } from \"..\"\n\nconst normalizeData = require(\"normalize-package-data\")\n\n/** @internal */\nexport async function readPackageJson(file: string): Promise<any> {\n  const data = await readJson(file)\n  await authors(file, data)\n  normalizeData(data)\n  // remove not required fields because can be used for remote build\n  delete data.scripts\n  delete data.readme\n  return data\n}\n\nasync function authors(file: string, data: any) {\n  if (data.contributors != null) {\n    return\n  }\n\n  let authorData\n  try {\n    authorData = await readFile(path.resolve(path.dirname(file), \"AUTHORS\"), \"utf8\")\n  }\n  catch (ignored) {\n    return\n  }\n\n  data.contributors = authorData\n    .split(/\\r?\\n/g)\n    .map(it => it.replace(/^\\s*#.*$/, \"\").trim())\n}\n\n/** @internal */\nexport function checkMetadata(metadata: Metadata, devMetadata: any | null, appPackageFile: string, devAppPackageFile: string): void {\n  const errors: Array<string> = []\n  const reportError = (missedFieldName: string) => {\n    errors.push(`Please specify '${missedFieldName}' in the package.json (${appPackageFile})`)\n  }\n\n  const checkNotEmpty = (name: string, value: string | null | undefined) => {\n    if (isEmptyOrSpaces(value)) {\n      reportError(name)\n    }\n  }\n\n  if ((metadata as any).directories != null) {\n    errors.push(`\"directories\" in the root is deprecated, please specify in the \"build\"`)\n  }\n\n  checkNotEmpty(\"name\", metadata.name)\n\n  if (isEmptyOrSpaces(metadata.description)) {\n    log.warn({appPackageFile}, `description is missed in the package.json`)\n  }\n  if (metadata.author == null) {\n    log.warn({appPackageFile}, `author is missed in the package.json`)\n  }\n  checkNotEmpty(\"version\", metadata.version)\n\n  if (metadata != null) {\n    checkDependencies(metadata.dependencies, errors)\n  }\n  if (metadata !== devMetadata) {\n    if (metadata.build != null) {\n      errors.push(`'build' in the application package.json (${appPackageFile}) is not supported since 3.0 anymore. Please move 'build' into the development package.json (${devAppPackageFile})`)\n    }\n  }\n\n  const devDependencies = (metadata as any).devDependencies\n  if (devDependencies != null && \"electron-rebuild\" in devDependencies) {\n    log.info('electron-rebuild not required if you use electron-builder, please consider to remove excess dependency from devDependencies\\n\\nTo ensure your native dependencies are always matched electron version, simply add script `\"postinstall\": \"electron-builder install-app-deps\" to your `package.json`')\n  }\n\n  if (errors.length > 0) {\n    throw new InvalidConfigurationError(errors.join(\"\\n\"))\n  }\n}\n\nexport function versionFromDependencyRange(version: string) {\n  const firstChar = version[0]\n  return firstChar === \"^\" || firstChar === \"~\" ? version.substring(1) : version\n}\n\nfunction checkDependencies(dependencies: { [key: string]: string } | null | undefined, errors: Array<string>) {\n  if (dependencies == null) {\n    return\n  }\n\n  const updaterVersion = dependencies[\"electron-updater\"]\n  if (updaterVersion != null && !semver.satisfies(versionFromDependencyRange(updaterVersion), \">=3.0.3\")) {\n    errors.push(`At least electron-updater 3.0.3 is recommended by current electron-builder version. Please set electron-updater version to \"^3.0.3\"`)\n  }\n\n  const swVersion = dependencies[\"electron-builder-squirrel-windows\"]\n  if (swVersion != null && !semver.satisfies(versionFromDependencyRange(swVersion), \">=20.23.0\")) {\n    errors.push(`At least electron-builder-squirrel-windows 20.23.0 is required by current electron-builder version. Please set electron-builder-squirrel-windows to \"^20.23.0\"`)\n  }\n\n  const deps = [\"electron\", \"electron-prebuilt\", \"electron-rebuild\"]\n  if (process.env.ALLOW_ELECTRON_BUILDER_AS_PRODUCTION_DEPENDENCY !== \"true\") {\n    deps.push(\"electron-builder\")\n  }\n  for (const name of deps) {\n    if (name in dependencies) {\n      errors.push(`Package \"${name}\" is only allowed in \"devDependencies\". `\n        + `Please remove it from the \"dependencies\" section in your package.json.`)\n    }\n  }\n}"],"sourceRoot":""}
