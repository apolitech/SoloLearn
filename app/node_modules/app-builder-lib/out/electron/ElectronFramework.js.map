{"version":3,"sources":["../../src/electron/ElectronFramework.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, executeAppBuilder, log } from \"builder-util\"\nimport { CONCURRENCY, copyDir, DO_NOT_USE_HARD_LINKS, statOrNull, unlinkIfExists } from \"builder-util/out/fs\"\nimport { emptyDir, readdir, remove, rename } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { AsarIntegrity } from \"../asar/integrity\"\nimport { Configuration } from \"../configuration\"\nimport { Framework, PrepareApplicationStageDirectoryOptions } from \"../Framework\"\nimport { ElectronPlatformName, Packager, Platform, PlatformPackager } from \"../index\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport MacPackager from \"../macPackager\"\nimport { createMacApp } from \"./electronMac\"\nimport { computeElectronVersion, getElectronVersionFromInstalled } from \"./electronVersion\"\n\nexport type ElectronPlatformName = \"darwin\" | \"linux\" | \"win32\" | \"mas\"\n\nexport interface ElectronDownloadOptions {\n  // https://github.com/electron-userland/electron-builder/issues/3077\n  // must be optional\n  version?: string\n\n  /**\n   * The [cache location](https://github.com/electron-userland/electron-download#cache-location).\n   */\n  cache?: string | null\n\n  /**\n   * The mirror.\n   */\n  mirror?: string | null\n\n  /** @private */\n  customDir?: string | null\n  /** @private */\n  customFilename?: string | null\n\n  strictSSL?: boolean\n  isVerifyChecksum?: boolean\n\n  platform?: ElectronPlatformName\n  arch?: string\n}\n\nfunction createDownloadOpts(opts: Configuration, platform: ElectronPlatformName, arch: string, electronVersion: string): ElectronDownloadOptions {\n  return {\n    platform,\n    arch,\n    version: electronVersion,\n    ...opts.electronDownload,\n  }\n}\n\nasync function beforeCopyExtraFiles(packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null, isClearExecStack: boolean) {\n  if (packager.platform === Platform.LINUX) {\n    const linuxPackager = (packager as LinuxPackager)\n    const executable = path.join(appOutDir, linuxPackager.executableName)\n    await rename(path.join(appOutDir, packager.electronDistExecutableName), executable)\n\n    if (isClearExecStack) {\n      try {\n        await executeAppBuilder([\"clear-exec-stack\", \"--input\", executable])\n      }\n      catch (e) {\n        log.debug({error: e}, \"cannot clear exec stack\")\n      }\n    }\n  }\n  else if (packager.platform === Platform.WINDOWS) {\n    const executable = path.join(appOutDir, `${packager.appInfo.productFilename}.exe`)\n    await rename(path.join(appOutDir, `${packager.electronDistExecutableName}.exe`), executable)\n  }\n  else {\n    await createMacApp(packager as MacPackager, appOutDir, asarIntegrity)\n\n    const wantedLanguages = asArray(packager.platformSpecificBuildOptions.electronLanguages)\n    if (wantedLanguages.length === 0) {\n      return\n    }\n\n    // noinspection SpellCheckingInspection\n    const langFileExt = \".lproj\"\n    const resourcesDir = packager.getResourcesDir(appOutDir)\n    await BluebirdPromise.map(readdir(resourcesDir), file => {\n      if (!file.endsWith(langFileExt)) {\n        return\n      }\n\n      const language = file.substring(0, file.length - langFileExt.length)\n      if (!wantedLanguages.includes(language)) {\n        return remove(path.join(resourcesDir, file))\n      }\n      return\n    }, CONCURRENCY)\n  }\n}\n\nexport async function createElectronFrameworkSupport(configuration: Configuration, packager: Packager): Promise<Framework> {\n  if (configuration.muonVersion != null) {\n    const distMacOsAppName = \"Brave.app\"\n    return {\n      name: \"muon\",\n      isDefaultAppIconProvided: true,\n      macOsDefaultTargets: [\"zip\", \"dmg\"],\n      defaultAppIdPrefix: \"com.electron.\",\n      version: configuration.muonVersion!!,\n      distMacOsAppName,\n      prepareApplicationStageDirectory: options => {\n        return unpack(options, {\n          mirror: \"https://github.com/brave/muon/releases/download/v\",\n          customFilename: `brave-v${options.version}-${options.platformName}-${options.arch}.zip`,\n          isVerifyChecksum: false,\n          ...createDownloadOpts(options.packager.config, options.platformName, options.arch, options.version),\n        }, distMacOsAppName)\n      },\n      isNpmRebuildRequired: true,\n      beforeCopyExtraFiles: (packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null) => {\n        return beforeCopyExtraFiles(packager, appOutDir, asarIntegrity, false)\n      },\n    }\n  }\n\n  let version = configuration.electronVersion\n  if (version == null) {\n    // for prepacked app asar no dev deps in the app.asar\n    if (packager.isPrepackedAppAsar) {\n      version = await getElectronVersionFromInstalled(packager.projectDir)\n      if (version == null) {\n        throw new Error(`Cannot compute electron version for prepacked asar`)\n      }\n    }\n    else {\n      version = await computeElectronVersion(packager.projectDir, new Lazy(() => Promise.resolve(packager.metadata)))\n    }\n    configuration.electronVersion = version\n  }\n\n  const distMacOsAppName = \"Electron.app\"\n  return {\n    isDefaultAppIconProvided: true,\n    macOsDefaultTargets: [\"zip\", \"dmg\"],\n    defaultAppIdPrefix: \"com.electron.\",\n    name: \"electron\",\n    version,\n    distMacOsAppName,\n    isNpmRebuildRequired: true,\n    prepareApplicationStageDirectory: options => unpack(options, createDownloadOpts(options.packager.config, options.platformName, options.arch, version!!), distMacOsAppName),\n    beforeCopyExtraFiles: (packager: PlatformPackager<any>, appOutDir: string, asarIntegrity: AsarIntegrity | null) => {\n      return beforeCopyExtraFiles(packager, appOutDir, asarIntegrity, semver.lte(version || \"1.8.3\", \"1.8.3\"))\n    },\n  }\n}\n\nasync function unpack(prepareOptions: PrepareApplicationStageDirectoryOptions, options: ElectronDownloadOptions, distMacOsAppName: string) {\n  const packager = prepareOptions.packager\n  const out = prepareOptions.appOutDir\n\n  let dist: string | null | undefined = packager.config.electronDist\n  if (dist != null) {\n    const zipFile = `electron-v${options.version}-${prepareOptions.platformName}-${options.arch}.zip`\n    const resolvedDist = path.resolve(packager.projectDir, dist)\n    if ((await statOrNull(path.join(resolvedDist, zipFile))) != null) {\n      options.cache = resolvedDist\n      dist = null\n    }\n  }\n\n  let isFullCleanup = false\n  if (dist == null) {\n    await executeAppBuilder([\"unpack-electron\", \"--configuration\", JSON.stringify([options]), \"--output\", out, \"--distMacOsAppName\", distMacOsAppName])\n  }\n  else {\n    isFullCleanup = true\n    const source = packager.getElectronSrcDir(dist)\n    const destination = packager.getElectronDestinationDir(out)\n    log.info({source, destination}, \"copying Electron\")\n    await emptyDir(out)\n    await copyDir(source, destination, {\n      isUseHardLink: DO_NOT_USE_HARD_LINKS,\n    })\n  }\n\n  await cleanupAfterUnpack(prepareOptions, distMacOsAppName, isFullCleanup)\n}\n\nfunction cleanupAfterUnpack(prepareOptions: PrepareApplicationStageDirectoryOptions, distMacOsAppName: string, isFullCleanup: boolean) {\n  const out = prepareOptions.appOutDir\n  const isMac = prepareOptions.packager.platform === Platform.MAC\n  const resourcesPath = isMac ? path.join(out, distMacOsAppName, \"Contents\", \"Resources\") : path.join(out, \"resources\")\n\n  return Promise.all([\n    isFullCleanup ? unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")) : Promise.resolve(),\n    isFullCleanup ? unlinkIfExists(path.join(out, \"version\")) : Promise.resolve(),\n    isMac ? Promise.resolve() : rename(path.join(out, \"LICENSE\"), path.join(out, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}),\n  ])\n}"],"sourceRoot":""}
